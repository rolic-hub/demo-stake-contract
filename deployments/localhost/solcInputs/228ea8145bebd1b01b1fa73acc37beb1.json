{
  "language": "Solidity",
  "sources": {
    "contracts/stakeFactory.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.9;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\";\r\nimport \"./stake.sol\";\r\n\r\nerror Stake__NoStaker();\r\n\r\ncontract StakeFactory {\r\n    Stake[] public stakeAddrresses;\r\n    uint256 private profit = 2 ether;\r\n    uint256 public interval;\r\n\r\n    constructor(uint256 _interval) payable {\r\n        interval = _interval;\r\n        (bool callSuccess, ) = address(this).call{value: msg.value}(\"\");\r\n        if (!callSuccess) {\r\n            revert Stake__transferFailed();\r\n        }\r\n        createStake();\r\n    }\r\n\r\n    function createStake() public payable {\r\n        Stake stakeContract = new Stake{value: profit}();\r\n        stakeAddrresses.push(stakeContract);\r\n    }\r\n\r\n    function checkUpkeep(\r\n        bytes memory /* checkData */\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            bool upkeepNeeded,\r\n            bytes memory /* performData */\r\n        )\r\n    {\r\n        uint256 _deadline = getDeadlinefromContract();\r\n        uint256 waitTime = _deadline + interval;\r\n        bool timePassed = (block.timestamp > waitTime);\r\n        bool balance = (address(this).balance > profit);\r\n        upkeepNeeded = (timePassed && balance);\r\n        return (upkeepNeeded, \"0x0\"); // can we comment this out?\r\n    }\r\n\r\n    function performUpkeep(\r\n        bytes calldata /* performData */\r\n    ) external {\r\n        //We highly recommend revalidating the upkeep in the performUpkeep function\r\n        (bool upkeepNeeded, ) = checkUpkeep(\"\");\r\n\r\n        if (upkeepNeeded) {\r\n            createStake();\r\n        }\r\n    }\r\n\r\n    function getDeadlinefromContract() public view returns (uint256) {\r\n        uint256 index = getNoofStakers();\r\n        if (index <= 0) {\r\n            revert Stake__NoStaker();\r\n        }\r\n        uint256 deadline = stakeAddrresses[index - 1].getDeadline();\r\n        return deadline;\r\n    }\r\n\r\n    function getStakeAddresses(uint256 _index) public view returns (address) {\r\n        return address(stakeAddrresses[_index]);\r\n    }\r\n\r\n    function getNoofStakers() public view returns (uint256) {\r\n        return stakeAddrresses.length;\r\n    }\r\n\r\n    function showProfit() public view returns (uint256) {\r\n        return profit;\r\n    }\r\n}\r\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface KeeperCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"
    },
    "contracts/stake.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.9;\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\n\r\nerror Stake__closed();\r\nerror Stake__sendMoreEth();\r\nerror Stake__deadlineNotReached();\r\nerror Stake__transferFailed();\r\n\r\ncontract Stake {\r\n    enum StakeState {\r\n        CLOSE,\r\n        OPEN,\r\n        WINTEREST,\r\n        WOINTEREST\r\n    }\r\n\r\n    using SafeMath for uint256;\r\n\r\n    uint256 private _interest;\r\n    uint256 private _contractBalance = address(this).balance;\r\n    uint256 private immutable deadline = block.timestamp.add(3 minutes);\r\n    uint256 private constant threshold = 1 ether;\r\n    StakeState public _stakeState;\r\n    uint256 private _totalStake = _contractBalance.sub(_interest);\r\n\r\n    mapping(address => uint256) public balances;\r\n    address[] private stakers;\r\n\r\n    event depositedEth(uint256 amount, address sender);\r\n\r\n    constructor() payable {\r\n        (bool callSuccess, ) = payable(address(this)).call{value: msg.value}(\"\");\r\n        if (!callSuccess) {\r\n            revert Stake__transferFailed();\r\n        }\r\n        _interest = msg.value;\r\n\r\n        _stakeState = StakeState.OPEN;\r\n    }\r\n\r\n    modifier waitTimer() {\r\n        if (block.timestamp < deadline) {\r\n            revert Stake__deadlineNotReached();\r\n        }\r\n        _;\r\n    }\r\n\r\n    /// @notice Explain to an end user what this does\r\n    /// @dev Explain to a developer any extra details\r\n\r\n    function deposit() public payable {\r\n        if (_stakeState == StakeState.CLOSE) {\r\n            revert Stake__closed();\r\n        }\r\n        if (msg.value <= 0) {\r\n            revert Stake__sendMoreEth();\r\n        }\r\n\r\n        balances[tx.origin] += msg.value;\r\n        stakers.push(tx.origin);\r\n        emit depositedEth(msg.value, tx.origin);\r\n    }\r\n\r\n    // main withdaw function which decides if the user makes a profit or not\r\n    // it sets the state of the contract\r\n\r\n    function withdraw() public waitTimer {\r\n         _stakeState = StakeState.CLOSE;\r\n        uint256 stakeT = address(this).balance - _interest;\r\n        if (stakeT >= threshold) {\r\n            _stakeState = StakeState.WINTEREST;\r\n            withdrawWInterest();\r\n        } else {\r\n            _stakeState = StakeState.WOINTEREST;\r\n            withdrawWOinterest();\r\n        }\r\n        // if (address(this).balance <= 0) {\r\n        //     _stakeState = StakeState.CLOSE;\r\n        // }\r\n    }\r\n\r\n    // withdraw without interest is called when the amount deposited\r\n    // is less than the threshold set\r\n    // when called it sends back the eth that was initially deposited\r\n\r\n    function withdrawWOinterest() internal {\r\n        if (_stakeState != StakeState.WOINTEREST) {\r\n            revert();\r\n        }\r\n        uint256 amount = balances[tx.origin];\r\n        balances[tx.origin] = 0;\r\n        (bool callSuccess, ) = payable(tx.origin).call{value: amount}(\"\");\r\n        if (!callSuccess) {\r\n            revert Stake__transferFailed();\r\n        }\r\n    }\r\n\r\n    // withdraw with interest is called when the amount\r\n    // deposited is greater than the threshold set\r\n    // when called it sends token deposited plus a calculated profit\r\n\r\n    function withdrawWInterest() internal {\r\n        if (_stakeState != StakeState.WINTEREST) {\r\n            revert();\r\n        }\r\n        uint256 amount = balances[tx.origin];\r\n        uint256 calculatedIn = calculateInterest(amount, _totalStake);\r\n        balances[tx.origin] = 0;\r\n        (bool callSuccess, ) = payable(tx.origin).call{value: calculatedIn}(\"\");\r\n        if (!callSuccess) {\r\n            revert Stake__transferFailed();\r\n        }\r\n    }\r\n\r\n    function calculateInterest(uint256 _amount, uint256 _total) internal view returns (uint256) {\r\n        uint256 calculate = (_amount.div(_total)).mul(_interest);\r\n        uint256 totalAmount = _amount + calculate;\r\n        return totalAmount;\r\n    }\r\n\r\n    function amountDeposited() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function getAmountStaked() public view returns (uint256) {\r\n        return _totalStake;\r\n    }\r\n\r\n    function getThreshold() public pure returns (uint256) {\r\n        return threshold;\r\n    }\r\n\r\n    function getStaker(uint256 _index) public view returns (address) {\r\n        return stakers[_index];\r\n    }\r\n\r\n    function getStakelength() public view returns (uint256) {\r\n        return stakers.length;\r\n    }\r\n\r\n    function getInterest() public view returns (uint256) {\r\n        return _interest;\r\n    }\r\n\r\n    function getDeadline() public view returns (uint256) {\r\n        return deadline;\r\n    }\r\n\r\n    receive() external payable {\r\n        deposit();\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}