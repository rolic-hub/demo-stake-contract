{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Stake__NoStaker",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Stake__transferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createStake",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDeadlinefromContract",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNoofStakers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getStakeAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "showProfit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakeAddrresses",
      "outputs": [
        {
          "internalType": "contract Stake",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x86989c824bd4d95fedafc042ba2bfc8172ac6f32119814e19afb9602baa060e6",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "2608064",
    "logsBloom": "0x
    "blockHash": "0x668e89680027a8b7432fbfb42e2f16acd82a848dbff8bf5639080700d67a34fe",
    "transactionHash": "0x86989c824bd4d95fedafc042ba2bfc8172ac6f32119814e19afb9602baa060e6",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "2608064",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "3600"
  ],
  "numDeployments": 1,
  "solcInputHash": "228ea8145bebd1b01b1fa73acc37beb1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_interval\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Stake__NoStaker\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Stake__transferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDeadlinefromContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNoofStakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getStakeAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeAddrresses\",\"outputs\":[{\"internalType\":\"contract Stake\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/stakeFactory.sol\":\"StakeFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/stake.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.9;\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\nerror Stake__closed();\\r\\nerror Stake__sendMoreEth();\\r\\nerror Stake__deadlineNotReached();\\r\\nerror Stake__transferFailed();\\r\\n\\r\\ncontract Stake {\\r\\n    enum StakeState {\\r\\n        CLOSE,\\r\\n        OPEN,\\r\\n        WINTEREST,\\r\\n        WOINTEREST\\r\\n    }\\r\\n\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    uint256 private _interest;\\r\\n    uint256 private _contractBalance = address(this).balance;\\r\\n    uint256 private immutable deadline = block.timestamp.add(3 minutes);\\r\\n    uint256 private constant threshold = 1 ether;\\r\\n    StakeState public _stakeState;\\r\\n    uint256 private _totalStake = _contractBalance.sub(_interest);\\r\\n\\r\\n    mapping(address => uint256) public balances;\\r\\n    address[] private stakers;\\r\\n\\r\\n    event depositedEth(uint256 amount, address sender);\\r\\n\\r\\n    constructor() payable {\\r\\n        (bool callSuccess, ) = payable(address(this)).call{value: msg.value}(\\\"\\\");\\r\\n        if (!callSuccess) {\\r\\n            revert Stake__transferFailed();\\r\\n        }\\r\\n        _interest = msg.value;\\r\\n\\r\\n        _stakeState = StakeState.OPEN;\\r\\n    }\\r\\n\\r\\n    modifier waitTimer() {\\r\\n        if (block.timestamp < deadline) {\\r\\n            revert Stake__deadlineNotReached();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Explain to an end user what this does\\r\\n    /// @dev Explain to a developer any extra details\\r\\n\\r\\n    function deposit() public payable {\\r\\n        if (_stakeState == StakeState.CLOSE) {\\r\\n            revert Stake__closed();\\r\\n        }\\r\\n        if (msg.value <= 0) {\\r\\n            revert Stake__sendMoreEth();\\r\\n        }\\r\\n\\r\\n        balances[tx.origin] += msg.value;\\r\\n        stakers.push(tx.origin);\\r\\n        emit depositedEth(msg.value, tx.origin);\\r\\n    }\\r\\n\\r\\n    // main withdaw function which decides if the user makes a profit or not\\r\\n    // it sets the state of the contract\\r\\n\\r\\n    function withdraw() public waitTimer {\\r\\n         _stakeState = StakeState.CLOSE;\\r\\n        uint256 stakeT = address(this).balance - _interest;\\r\\n        if (stakeT >= threshold) {\\r\\n            _stakeState = StakeState.WINTEREST;\\r\\n            withdrawWInterest();\\r\\n        } else {\\r\\n            _stakeState = StakeState.WOINTEREST;\\r\\n            withdrawWOinterest();\\r\\n        }\\r\\n        // if (address(this).balance <= 0) {\\r\\n        //     _stakeState = StakeState.CLOSE;\\r\\n        // }\\r\\n    }\\r\\n\\r\\n    // withdraw without interest is called when the amount deposited\\r\\n    // is less than the threshold set\\r\\n    // when called it sends back the eth that was initially deposited\\r\\n\\r\\n    function withdrawWOinterest() internal {\\r\\n        if (_stakeState != StakeState.WOINTEREST) {\\r\\n            revert();\\r\\n        }\\r\\n        uint256 amount = balances[tx.origin];\\r\\n        balances[tx.origin] = 0;\\r\\n        (bool callSuccess, ) = payable(tx.origin).call{value: amount}(\\\"\\\");\\r\\n        if (!callSuccess) {\\r\\n            revert Stake__transferFailed();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // withdraw with interest is called when the amount\\r\\n    // deposited is greater than the threshold set\\r\\n    // when called it sends token deposited plus a calculated profit\\r\\n\\r\\n    function withdrawWInterest() internal {\\r\\n        if (_stakeState != StakeState.WINTEREST) {\\r\\n            revert();\\r\\n        }\\r\\n        uint256 amount = balances[tx.origin];\\r\\n        uint256 calculatedIn = calculateInterest(amount, _totalStake);\\r\\n        balances[tx.origin] = 0;\\r\\n        (bool callSuccess, ) = payable(tx.origin).call{value: calculatedIn}(\\\"\\\");\\r\\n        if (!callSuccess) {\\r\\n            revert Stake__transferFailed();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function calculateInterest(uint256 _amount, uint256 _total) internal view returns (uint256) {\\r\\n        uint256 calculate = (_amount.div(_total)).mul(_interest);\\r\\n        uint256 totalAmount = _amount + calculate;\\r\\n        return totalAmount;\\r\\n    }\\r\\n\\r\\n    function amountDeposited() public view returns (uint256) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n\\r\\n    function getAmountStaked() public view returns (uint256) {\\r\\n        return _totalStake;\\r\\n    }\\r\\n\\r\\n    function getThreshold() public pure returns (uint256) {\\r\\n        return threshold;\\r\\n    }\\r\\n\\r\\n    function getStaker(uint256 _index) public view returns (address) {\\r\\n        return stakers[_index];\\r\\n    }\\r\\n\\r\\n    function getStakelength() public view returns (uint256) {\\r\\n        return stakers.length;\\r\\n    }\\r\\n\\r\\n    function getInterest() public view returns (uint256) {\\r\\n        return _interest;\\r\\n    }\\r\\n\\r\\n    function getDeadline() public view returns (uint256) {\\r\\n        return deadline;\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        deposit();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8f8394677fda3425cc2fa76ec7eca87f5cb4cd8cd5f91fe43b8b75ed48026673\",\"license\":\"MIT\"},\"contracts/stakeFactory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\r\\nimport \\\"./stake.sol\\\";\\r\\n\\r\\nerror Stake__NoStaker();\\r\\n\\r\\ncontract StakeFactory {\\r\\n    Stake[] public stakeAddrresses;\\r\\n    uint256 private profit = 2 ether;\\r\\n    uint256 public interval;\\r\\n\\r\\n    constructor(uint256 _interval) payable {\\r\\n        interval = _interval;\\r\\n        (bool callSuccess, ) = address(this).call{value: msg.value}(\\\"\\\");\\r\\n        if (!callSuccess) {\\r\\n            revert Stake__transferFailed();\\r\\n        }\\r\\n        createStake();\\r\\n    }\\r\\n\\r\\n    function createStake() public payable {\\r\\n        Stake stakeContract = new Stake{value: profit}();\\r\\n        stakeAddrresses.push(stakeContract);\\r\\n    }\\r\\n\\r\\n    function checkUpkeep(\\r\\n        bytes memory /* checkData */\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            bool upkeepNeeded,\\r\\n            bytes memory /* performData */\\r\\n        )\\r\\n    {\\r\\n        uint256 _deadline = getDeadlinefromContract();\\r\\n        uint256 waitTime = _deadline + interval;\\r\\n        bool timePassed = (block.timestamp > waitTime);\\r\\n        bool balance = (address(this).balance > profit);\\r\\n        upkeepNeeded = (timePassed && balance);\\r\\n        return (upkeepNeeded, \\\"0x0\\\"); // can we comment this out?\\r\\n    }\\r\\n\\r\\n    function performUpkeep(\\r\\n        bytes calldata /* performData */\\r\\n    ) external {\\r\\n        //We highly recommend revalidating the upkeep in the performUpkeep function\\r\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\r\\n\\r\\n        if (upkeepNeeded) {\\r\\n            createStake();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getDeadlinefromContract() public view returns (uint256) {\\r\\n        uint256 index = getNoofStakers();\\r\\n        if (index <= 0) {\\r\\n            revert Stake__NoStaker();\\r\\n        }\\r\\n        uint256 deadline = stakeAddrresses[index - 1].getDeadline();\\r\\n        return deadline;\\r\\n    }\\r\\n\\r\\n    function getStakeAddresses(uint256 _index) public view returns (address) {\\r\\n        return address(stakeAddrresses[_index]);\\r\\n    }\\r\\n\\r\\n    function getNoofStakers() public view returns (uint256) {\\r\\n        return stakeAddrresses.length;\\r\\n    }\\r\\n\\r\\n    function showProfit() public view returns (uint256) {\\r\\n        return profit;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x34d6ac970064c7b638f26bcb2c1590c24cab0a776c3ac15f294864b665227e9c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052671bc16d674ec8000060015560405162002f5838038062002f588339818101604052810190620000359190620001e4565b8060028190555060003073ffffffffffffffffffffffffffffffffffffffff163460405162000064906200024b565b60006040518083038185875af1925050503d8060008114620000a3576040519150601f19603f3d011682016040523d82523d6000602084013e620000a8565b606091505b5050905080620000e4576040517ff1b8e45500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b620000f4620000fc60201b60201c565b505062000262565b60006001546040516200010f9062000196565b6040518091039082f09050801580156200012d573d6000803e3d6000fd5b5090506000819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61107a8062001ede83390190565b600080fd5b6000819050919050565b620001be81620001a9565b8114620001ca57600080fd5b50565b600081519050620001de81620001b3565b92915050565b600060208284031215620001fd57620001fc620001a4565b5b60006200020d84828501620001cd565b91505092915050565b600081905092915050565b50565b60006200023360008362000216565b9150620002408262000221565b600082019050919050565b6000620002588262000224565b9150819050919050565b611c6c80620002726000396000f3fe608060405260043610620000925760003560e01c80636e04ff0d11620000615780636e04ff0d14620001455780638f351464146200018a578063947a36fb14620001ba5780639a67cdd214620001ea578063b3dbd1bc146200022e5762000092565b80630c7331b114620000975780632cbd5e4214620000a35780633fca7a6a14620000d35780634585e33b1462000117575b600080fd5b620000a16200025e565b005b348015620000b057600080fd5b50620000bb620002f8565b604051620000ca9190620005aa565b60405180910390f35b348015620000e057600080fd5b50620000ff6004803603810190620000f991906200060c565b6200041e565b6040516200010e919062000683565b60405180910390f35b3480156200012457600080fd5b506200014360048036038101906200013d91906200070e565b62000468565b005b3480156200015257600080fd5b506200017160048036038101906200016b9190620008c0565b6200049e565b60405162000181929190620009c1565b60405180910390f35b3480156200019757600080fd5b50620001a262000525565b604051620001b19190620005aa565b60405180910390f35b348015620001c757600080fd5b50620001d26200052f565b604051620001e19190620005aa565b60405180910390f35b348015620001f757600080fd5b506200021660048036038101906200021091906200060c565b62000535565b60405162000225919062000a60565b60405180910390f35b3480156200023b57600080fd5b506200024662000575565b604051620002559190620005aa565b60405180910390f35b6000600154604051620002719062000581565b6040518091039082f09050801580156200028f573d6000803e3d6000fd5b5090506000819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806200030562000575565b90506000811162000342576040517f03bdd14700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060018362000354919062000aac565b8154811062000368576200036762000ae7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635f8d96de6040518163ffffffff1660e01b815260040160206040518083038186803b158015620003d957600080fd5b505afa158015620003ee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000414919062000b2d565b9050809250505090565b600080828154811062000436576200043562000ae7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600062000484604051806020016040528060008152506200049e565b50905080156200049957620004986200025e565b5b505050565b600060606000620004ae620002f8565b9050600060025482620004c2919062000b5f565b905060008142119050600060015447119050818015620004df5750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b6000600154905090565b60025481565b600081815481106200054657600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008080549050905090565b61107a8062000bbd83390190565b6000819050919050565b620005a4816200058f565b82525050565b6000602082019050620005c1600083018462000599565b92915050565b6000604051905090565b600080fd5b600080fd5b620005e6816200058f565b8114620005f257600080fd5b50565b6000813590506200060681620005db565b92915050565b600060208284031215620006255762000624620005d1565b5b60006200063584828501620005f5565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200066b826200063e565b9050919050565b6200067d816200065e565b82525050565b60006020820190506200069a600083018462000672565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112620006c857620006c7620006a0565b5b8235905067ffffffffffffffff811115620006e857620006e7620006a5565b5b602083019150836001820283011115620007075762000706620006aa565b5b9250929050565b60008060208385031215620007285762000727620005d1565b5b600083013567ffffffffffffffff811115620007495762000748620005d6565b5b6200075785828601620006af565b92509250509250929050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620007b38262000768565b810181811067ffffffffffffffff82111715620007d557620007d462000779565b5b80604052505050565b6000620007ea620005c7565b9050620007f88282620007a8565b919050565b600067ffffffffffffffff8211156200081b576200081a62000779565b5b620008268262000768565b9050602081019050919050565b82818337600083830152505050565b6000620008596200085384620007fd565b620007de565b90508281526020810184848401111562000878576200087762000763565b5b6200088584828562000833565b509392505050565b600082601f830112620008a557620008a4620006a0565b5b8135620008b784826020860162000842565b91505092915050565b600060208284031215620008d957620008d8620005d1565b5b600082013567ffffffffffffffff811115620008fa57620008f9620005d6565b5b62000908848285016200088d565b91505092915050565b60008115159050919050565b620009288162000911565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156200096a5780820151818401526020810190506200094d565b838111156200097a576000848401525b50505050565b60006200098d826200092e565b62000999818562000939565b9350620009ab8185602086016200094a565b620009b68162000768565b840191505092915050565b6000604082019050620009d860008301856200091d565b8181036020830152620009ec818462000980565b90509392505050565b6000819050919050565b600062000a2062000a1a62000a14846200063e565b620009f5565b6200063e565b9050919050565b600062000a3482620009ff565b9050919050565b600062000a488262000a27565b9050919050565b62000a5a8162000a3b565b82525050565b600060208201905062000a77600083018462000a4f565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062000ab9826200058f565b915062000ac6836200058f565b92508282101562000adc5762000adb62000a7d565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008151905062000b2781620005db565b92915050565b60006020828403121562000b465762000b45620005d1565b5b600062000b568482850162000b16565b91505092915050565b600062000b6c826200058f565b915062000b79836200058f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111562000bb15762000bb062000a7d565b5b82820190509291505056fe60a0604052476001556200002360b4426200012e60201b620005fe1790919060201c565b608090815250620000476000546001546200014660201b620006141790919060201c565b60035560003073ffffffffffffffffffffffffffffffffffffffff1634604051620000729062000193565b60006040518083038185875af1925050503d8060008114620000b1576040519150601f19603f3d011682016040523d82523d6000602084013e620000b6565b606091505b5050905080620000f2576040517ff1b8e45500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b346000819055506001600260006101000a81548160ff02191690836003811115620001225762000121620001aa565b5b021790555050620002aa565b600081836200013e919062000212565b905092915050565b600081836200015691906200026f565b905092915050565b600081905092915050565b50565b60006200017b6000836200015e565b9150620001888262000169565b600082019050919050565b6000620001a0826200016c565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006200021f82620001d9565b91506200022c83620001d9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115620002645762000263620001e3565b5b828201905092915050565b60006200027c82620001d9565b91506200028983620001d9565b9250828210156200029f576200029e620001e3565b5b828203905092915050565b608051610dad620002cd6000396000818161043201526105670152610dad6000f3fe6080604052600436106100a05760003560e01c8063a9bdbf8911610064578063a9bdbf8914610189578063d0e30db0146101b4578063e3c998fe146101be578063e5a4bed3146101fb578063e75235b814610226578063f86ccd4114610251576100af565b806327e235e3146100b45780633ccfd60b146100f15780634f1c44e8146101085780635c8c0106146101335780635f8d96de1461015e576100af565b366100af576100ad61027c565b005b600080fd5b3480156100c057600080fd5b506100db60048036038101906100d691906109f0565b610418565b6040516100e89190610a36565b60405180910390f35b3480156100fd57600080fd5b50610106610430565b005b34801561011457600080fd5b5061011d610543565b60405161012a9190610ac8565b60405180910390f35b34801561013f57600080fd5b50610148610556565b6040516101559190610a36565b60405180910390f35b34801561016a57600080fd5b50610173610563565b6040516101809190610a36565b60405180910390f35b34801561019557600080fd5b5061019e61058b565b6040516101ab9190610a36565b60405180910390f35b6101bc61027c565b005b3480156101ca57600080fd5b506101e560048036038101906101e09190610b0f565b610595565b6040516101f29190610b4b565b60405180910390f35b34801561020757600080fd5b506102106105dd565b60405161021d9190610a36565b60405180910390f35b34801561023257600080fd5b5061023b6105e6565b6040516102489190610a36565b60405180910390f35b34801561025d57600080fd5b506102666105f6565b6040516102739190610a36565b60405180910390f35b600060038111156102905761028f610a51565b5b600260009054906101000a900460ff1660038111156102b2576102b1610a51565b5b14156102ea576040517f931c2fa100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003411610324576040517f6ef2e20400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b34600460003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103739190610b95565b925050819055506005329080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f82228ddde9005f71e552e17d0b2b4bd53f597251cd2afae87474c9895438a57a343260405161040e929190610beb565b60405180910390a1565b60046020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000042101561048a576040517f65e76f8100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260006101000a81548160ff021916908360038111156104b0576104af610a51565b5b021790555060008054476104c49190610c14565b9050670de0b6b3a7640000811061050c5760028060006101000a81548160ff021916908360038111156104fa576104f9610a51565b5b021790555061050761062a565b610540565b6003600260006101000a81548160ff0219169083600381111561053257610531610a51565b5b021790555061053f6107ab565b5b50565b600260009054906101000a900460ff1681565b6000600580549050905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600354905090565b6000600582815481106105ab576105aa610c48565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008054905090565b6000670de0b6b3a7640000905090565b600047905090565b6000818361060c9190610b95565b905092915050565b600081836106229190610c14565b905092915050565b6002600381111561063e5761063d610a51565b5b600260009054906101000a900460ff1660038111156106605761065f610a51565b5b1461066a57600080fd5b6000600460003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060006106bc8260035461091a565b90506000600460003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060003273ffffffffffffffffffffffffffffffffffffffff168260405161072990610ca8565b60006040518083038185875af1925050503d8060008114610766576040519150601f19603f3d011682016040523d82523d6000602084013e61076b565b606091505b50509050806107a6576040517ff1b8e45500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b6003808111156107be576107bd610a51565b5b600260009054906101000a900460ff1660038111156107e0576107df610a51565b5b146107ea57600080fd5b6000600460003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600460003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060003273ffffffffffffffffffffffffffffffffffffffff168260405161089990610ca8565b60006040518083038185875af1925050503d80600081146108d6576040519150601f19603f3d011682016040523d82523d6000602084013e6108db565b606091505b5050905080610916576040517ff1b8e45500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b600080610944600054610936858761096190919063ffffffff16565b61097790919063ffffffff16565b9050600081856109549190610b95565b9050809250505092915050565b6000818361096f9190610cec565b905092915050565b600081836109859190610d1d565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109bd82610992565b9050919050565b6109cd816109b2565b81146109d857600080fd5b50565b6000813590506109ea816109c4565b92915050565b600060208284031215610a0657610a0561098d565b5b6000610a14848285016109db565b91505092915050565b6000819050919050565b610a3081610a1d565b82525050565b6000602082019050610a4b6000830184610a27565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110610a9157610a90610a51565b5b50565b6000819050610aa282610a80565b919050565b6000610ab282610a94565b9050919050565b610ac281610aa7565b82525050565b6000602082019050610add6000830184610ab9565b92915050565b610aec81610a1d565b8114610af757600080fd5b50565b600081359050610b0981610ae3565b92915050565b600060208284031215610b2557610b2461098d565b5b6000610b3384828501610afa565b91505092915050565b610b45816109b2565b82525050565b6000602082019050610b606000830184610b3c565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ba082610a1d565b9150610bab83610a1d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610be057610bdf610b66565b5b828201905092915050565b6000604082019050610c006000830185610a27565b610c0d6020830184610b3c565b9392505050565b6000610c1f82610a1d565b9150610c2a83610a1d565b925082821015610c3d57610c3c610b66565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081905092915050565b50565b6000610c92600083610c77565b9150610c9d82610c82565b600082019050919050565b6000610cb382610c85565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610cf782610a1d565b9150610d0283610a1d565b925082610d1257610d11610cbd565b5b828204905092915050565b6000610d2882610a1d565b9150610d3383610a1d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610d6c57610d6b610b66565b5b82820290509291505056fea2646970667358221220bc8ed4a50f8772d4372836b43b5495fe6ef0a96b81e03304d091720f45e10a0b64736f6c63430008090033a26469706673582212203615428be52f3943c966928e9f1f50bfc6490625c5f64ba3d41b9ebbc2c18f2a64736f6c6343000809003360a0604052476001556200002360b4426200012e60201b620005fe1790919060201c565b608090815250620000476000546001546200014660201b620006141790919060201c565b60035560003073ffffffffffffffffffffffffffffffffffffffff1634604051620000729062000193565b60006040518083038185875af1925050503d8060008114620000b1576040519150601f19603f3d011682016040523d82523d6000602084013e620000b6565b606091505b5050905080620000f2576040517ff1b8e45500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b346000819055506001600260006101000a81548160ff02191690836003811115620001225762000121620001aa565b5b021790555050620002aa565b600081836200013e919062000212565b905092915050565b600081836200015691906200026f565b905092915050565b600081905092915050565b50565b60006200017b6000836200015e565b9150620001888262000169565b600082019050919050565b6000620001a0826200016c565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006200021f82620001d9565b91506200022c83620001d9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115620002645762000263620001e3565b5b828201905092915050565b60006200027c82620001d9565b91506200028983620001d9565b9250828210156200029f576200029e620001e3565b5b828203905092915050565b608051610dad620002cd6000396000818161043201526105670152610dad6000f3fe6080604052600436106100a05760003560e01c8063a9bdbf8911610064578063a9bdbf8914610189578063d0e30db0146101b4578063e3c998fe146101be578063e5a4bed3146101fb578063e75235b814610226578063f86ccd4114610251576100af565b806327e235e3146100b45780633ccfd60b146100f15780634f1c44e8146101085780635c8c0106146101335780635f8d96de1461015e576100af565b366100af576100ad61027c565b005b600080fd5b3480156100c057600080fd5b506100db60048036038101906100d691906109f0565b610418565b6040516100e89190610a36565b60405180910390f35b3480156100fd57600080fd5b50610106610430565b005b34801561011457600080fd5b5061011d610543565b60405161012a9190610ac8565b60405180910390f35b34801561013f57600080fd5b50610148610556565b6040516101559190610a36565b60405180910390f35b34801561016a57600080fd5b50610173610563565b6040516101809190610a36565b60405180910390f35b34801561019557600080fd5b5061019e61058b565b6040516101ab9190610a36565b60405180910390f35b6101bc61027c565b005b3480156101ca57600080fd5b506101e560048036038101906101e09190610b0f565b610595565b6040516101f29190610b4b565b60405180910390f35b34801561020757600080fd5b506102106105dd565b60405161021d9190610a36565b60405180910390f35b34801561023257600080fd5b5061023b6105e6565b6040516102489190610a36565b60405180910390f35b34801561025d57600080fd5b506102666105f6565b6040516102739190610a36565b60405180910390f35b600060038111156102905761028f610a51565b5b600260009054906101000a900460ff1660038111156102b2576102b1610a51565b5b14156102ea576040517f931c2fa100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003411610324576040517f6ef2e20400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b34600460003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103739190610b95565b925050819055506005329080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f82228ddde9005f71e552e17d0b2b4bd53f597251cd2afae87474c9895438a57a343260405161040e929190610beb565b60405180910390a1565b60046020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000042101561048a576040517f65e76f8100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260006101000a81548160ff021916908360038111156104b0576104af610a51565b5b021790555060008054476104c49190610c14565b9050670de0b6b3a7640000811061050c5760028060006101000a81548160ff021916908360038111156104fa576104f9610a51565b5b021790555061050761062a565b610540565b6003600260006101000a81548160ff0219169083600381111561053257610531610a51565b5b021790555061053f6107ab565b5b50565b600260009054906101000a900460ff1681565b6000600580549050905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600354905090565b6000600582815481106105ab576105aa610c48565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008054905090565b6000670de0b6b3a7640000905090565b600047905090565b6000818361060c9190610b95565b905092915050565b600081836106229190610c14565b905092915050565b6002600381111561063e5761063d610a51565b5b600260009054906101000a900460ff1660038111156106605761065f610a51565b5b1461066a57600080fd5b6000600460003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060006106bc8260035461091a565b90506000600460003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060003273ffffffffffffffffffffffffffffffffffffffff168260405161072990610ca8565b60006040518083038185875af1925050503d8060008114610766576040519150601f19603f3d011682016040523d82523d6000602084013e61076b565b606091505b50509050806107a6576040517ff1b8e45500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b6003808111156107be576107bd610a51565b5b600260009054906101000a900460ff1660038111156107e0576107df610a51565b5b146107ea57600080fd5b6000600460003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600460003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060003273ffffffffffffffffffffffffffffffffffffffff168260405161089990610ca8565b60006040518083038185875af1925050503d80600081146108d6576040519150601f19603f3d011682016040523d82523d6000602084013e6108db565b606091505b5050905080610916576040517ff1b8e45500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b600080610944600054610936858761096190919063ffffffff16565b61097790919063ffffffff16565b9050600081856109549190610b95565b9050809250505092915050565b6000818361096f9190610cec565b905092915050565b600081836109859190610d1d565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109bd82610992565b9050919050565b6109cd816109b2565b81146109d857600080fd5b50565b6000813590506109ea816109c4565b92915050565b600060208284031215610a0657610a0561098d565b5b6000610a14848285016109db565b91505092915050565b6000819050919050565b610a3081610a1d565b82525050565b6000602082019050610a4b6000830184610a27565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110610a9157610a90610a51565b5b50565b6000819050610aa282610a80565b919050565b6000610ab282610a94565b9050919050565b610ac281610aa7565b82525050565b6000602082019050610add6000830184610ab9565b92915050565b610aec81610a1d565b8114610af757600080fd5b50565b600081359050610b0981610ae3565b92915050565b600060208284031215610b2557610b2461098d565b5b6000610b3384828501610afa565b91505092915050565b610b45816109b2565b82525050565b6000602082019050610b606000830184610b3c565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ba082610a1d565b9150610bab83610a1d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610be057610bdf610b66565b5b828201905092915050565b6000604082019050610c006000830185610a27565b610c0d6020830184610b3c565b9392505050565b6000610c1f82610a1d565b9150610c2a83610a1d565b925082821015610c3d57610c3c610b66565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081905092915050565b50565b6000610c92600083610c77565b9150610c9d82610c82565b600082019050919050565b6000610cb382610c85565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610cf782610a1d565b9150610d0283610a1d565b925082610d1257610d11610cbd565b5b828204905092915050565b6000610d2882610a1d565b9150610d3383610a1d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610d6c57610d6b610b66565b5b82820290509291505056fea2646970667358221220bc8ed4a50f8772d4372836b43b5495fe6ef0a96b81e03304d091720f45e10a0b64736f6c63430008090033",
  "deployedBytecode": "0x608060405260043610620000925760003560e01c80636e04ff0d11620000615780636e04ff0d14620001455780638f351464146200018a578063947a36fb14620001ba5780639a67cdd214620001ea578063b3dbd1bc146200022e5762000092565b80630c7331b114620000975780632cbd5e4214620000a35780633fca7a6a14620000d35780634585e33b1462000117575b600080fd5b620000a16200025e565b005b348015620000b057600080fd5b50620000bb620002f8565b604051620000ca9190620005aa565b60405180910390f35b348015620000e057600080fd5b50620000ff6004803603810190620000f991906200060c565b6200041e565b6040516200010e919062000683565b60405180910390f35b3480156200012457600080fd5b506200014360048036038101906200013d91906200070e565b62000468565b005b3480156200015257600080fd5b506200017160048036038101906200016b9190620008c0565b6200049e565b60405162000181929190620009c1565b60405180910390f35b3480156200019757600080fd5b50620001a262000525565b604051620001b19190620005aa565b60405180910390f35b348015620001c757600080fd5b50620001d26200052f565b604051620001e19190620005aa565b60405180910390f35b348015620001f757600080fd5b506200021660048036038101906200021091906200060c565b62000535565b60405162000225919062000a60565b60405180910390f35b3480156200023b57600080fd5b506200024662000575565b604051620002559190620005aa565b60405180910390f35b6000600154604051620002719062000581565b6040518091039082f09050801580156200028f573d6000803e3d6000fd5b5090506000819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806200030562000575565b90506000811162000342576040517f03bdd14700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060018362000354919062000aac565b8154811062000368576200036762000ae7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635f8d96de6040518163ffffffff1660e01b815260040160206040518083038186803b158015620003d957600080fd5b505afa158015620003ee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000414919062000b2d565b9050809250505090565b600080828154811062000436576200043562000ae7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600062000484604051806020016040528060008152506200049e565b50905080156200049957620004986200025e565b5b505050565b600060606000620004ae620002f8565b9050600060025482620004c2919062000b5f565b905060008142119050600060015447119050818015620004df5750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b6000600154905090565b60025481565b600081815481106200054657600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008080549050905090565b61107a8062000bbd83390190565b6000819050919050565b620005a4816200058f565b82525050565b6000602082019050620005c1600083018462000599565b92915050565b6000604051905090565b600080fd5b600080fd5b620005e6816200058f565b8114620005f257600080fd5b50565b6000813590506200060681620005db565b92915050565b600060208284031215620006255762000624620005d1565b5b60006200063584828501620005f5565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200066b826200063e565b9050919050565b6200067d816200065e565b82525050565b60006020820190506200069a600083018462000672565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112620006c857620006c7620006a0565b5b8235905067ffffffffffffffff811115620006e857620006e7620006a5565b5b602083019150836001820283011115620007075762000706620006aa565b5b9250929050565b60008060208385031215620007285762000727620005d1565b5b600083013567ffffffffffffffff811115620007495762000748620005d6565b5b6200075785828601620006af565b92509250509250929050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620007b38262000768565b810181811067ffffffffffffffff82111715620007d557620007d462000779565b5b80604052505050565b6000620007ea620005c7565b9050620007f88282620007a8565b919050565b600067ffffffffffffffff8211156200081b576200081a62000779565b5b620008268262000768565b9050602081019050919050565b82818337600083830152505050565b6000620008596200085384620007fd565b620007de565b90508281526020810184848401111562000878576200087762000763565b5b6200088584828562000833565b509392505050565b600082601f830112620008a557620008a4620006a0565b5b8135620008b784826020860162000842565b91505092915050565b600060208284031215620008d957620008d8620005d1565b5b600082013567ffffffffffffffff811115620008fa57620008f9620005d6565b5b62000908848285016200088d565b91505092915050565b60008115159050919050565b620009288162000911565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156200096a5780820151818401526020810190506200094d565b838111156200097a576000848401525b50505050565b60006200098d826200092e565b62000999818562000939565b9350620009ab8185602086016200094a565b620009b68162000768565b840191505092915050565b6000604082019050620009d860008301856200091d565b8181036020830152620009ec818462000980565b90509392505050565b6000819050919050565b600062000a2062000a1a62000a14846200063e565b620009f5565b6200063e565b9050919050565b600062000a3482620009ff565b9050919050565b600062000a488262000a27565b9050919050565b62000a5a8162000a3b565b82525050565b600060208201905062000a77600083018462000a4f565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062000ab9826200058f565b915062000ac6836200058f565b92508282101562000adc5762000adb62000a7d565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008151905062000b2781620005db565b92915050565b60006020828403121562000b465762000b45620005d1565b5b600062000b568482850162000b16565b91505092915050565b600062000b6c826200058f565b915062000b79836200058f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111562000bb15762000bb062000a7d565b5b82820190509291505056fe60a0604052476001556200002360b4426200012e60201b620005fe1790919060201c565b608090815250620000476000546001546200014660201b620006141790919060201c565b60035560003073ffffffffffffffffffffffffffffffffffffffff1634604051620000729062000193565b60006040518083038185875af1925050503d8060008114620000b1576040519150601f19603f3d011682016040523d82523d6000602084013e620000b6565b606091505b5050905080620000f2576040517ff1b8e45500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b346000819055506001600260006101000a81548160ff02191690836003811115620001225762000121620001aa565b5b021790555050620002aa565b600081836200013e919062000212565b905092915050565b600081836200015691906200026f565b905092915050565b600081905092915050565b50565b60006200017b6000836200015e565b9150620001888262000169565b600082019050919050565b6000620001a0826200016c565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006200021f82620001d9565b91506200022c83620001d9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115620002645762000263620001e3565b5b828201905092915050565b60006200027c82620001d9565b91506200028983620001d9565b9250828210156200029f576200029e620001e3565b5b828203905092915050565b608051610dad620002cd6000396000818161043201526105670152610dad6000f3fe6080604052600436106100a05760003560e01c8063a9bdbf8911610064578063a9bdbf8914610189578063d0e30db0146101b4578063e3c998fe146101be578063e5a4bed3146101fb578063e75235b814610226578063f86ccd4114610251576100af565b806327e235e3146100b45780633ccfd60b146100f15780634f1c44e8146101085780635c8c0106146101335780635f8d96de1461015e576100af565b366100af576100ad61027c565b005b600080fd5b3480156100c057600080fd5b506100db60048036038101906100d691906109f0565b610418565b6040516100e89190610a36565b60405180910390f35b3480156100fd57600080fd5b50610106610430565b005b34801561011457600080fd5b5061011d610543565b60405161012a9190610ac8565b60405180910390f35b34801561013f57600080fd5b50610148610556565b6040516101559190610a36565b60405180910390f35b34801561016a57600080fd5b50610173610563565b6040516101809190610a36565b60405180910390f35b34801561019557600080fd5b5061019e61058b565b6040516101ab9190610a36565b60405180910390f35b6101bc61027c565b005b3480156101ca57600080fd5b506101e560048036038101906101e09190610b0f565b610595565b6040516101f29190610b4b565b60405180910390f35b34801561020757600080fd5b506102106105dd565b60405161021d9190610a36565b60405180910390f35b34801561023257600080fd5b5061023b6105e6565b6040516102489190610a36565b60405180910390f35b34801561025d57600080fd5b506102666105f6565b6040516102739190610a36565b60405180910390f35b600060038111156102905761028f610a51565b5b600260009054906101000a900460ff1660038111156102b2576102b1610a51565b5b14156102ea576040517f931c2fa100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003411610324576040517f6ef2e20400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b34600460003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103739190610b95565b925050819055506005329080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f82228ddde9005f71e552e17d0b2b4bd53f597251cd2afae87474c9895438a57a343260405161040e929190610beb565b60405180910390a1565b60046020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000042101561048a576040517f65e76f8100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260006101000a81548160ff021916908360038111156104b0576104af610a51565b5b021790555060008054476104c49190610c14565b9050670de0b6b3a7640000811061050c5760028060006101000a81548160ff021916908360038111156104fa576104f9610a51565b5b021790555061050761062a565b610540565b6003600260006101000a81548160ff0219169083600381111561053257610531610a51565b5b021790555061053f6107ab565b5b50565b600260009054906101000a900460ff1681565b6000600580549050905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600354905090565b6000600582815481106105ab576105aa610c48565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008054905090565b6000670de0b6b3a7640000905090565b600047905090565b6000818361060c9190610b95565b905092915050565b600081836106229190610c14565b905092915050565b6002600381111561063e5761063d610a51565b5b600260009054906101000a900460ff1660038111156106605761065f610a51565b5b1461066a57600080fd5b6000600460003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060006106bc8260035461091a565b90506000600460003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060003273ffffffffffffffffffffffffffffffffffffffff168260405161072990610ca8565b60006040518083038185875af1925050503d8060008114610766576040519150601f19603f3d011682016040523d82523d6000602084013e61076b565b606091505b50509050806107a6576040517ff1b8e45500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b6003808111156107be576107bd610a51565b5b600260009054906101000a900460ff1660038111156107e0576107df610a51565b5b146107ea57600080fd5b6000600460003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600460003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060003273ffffffffffffffffffffffffffffffffffffffff168260405161089990610ca8565b60006040518083038185875af1925050503d80600081146108d6576040519150601f19603f3d011682016040523d82523d6000602084013e6108db565b606091505b5050905080610916576040517ff1b8e45500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b600080610944600054610936858761096190919063ffffffff16565b61097790919063ffffffff16565b9050600081856109549190610b95565b9050809250505092915050565b6000818361096f9190610cec565b905092915050565b600081836109859190610d1d565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109bd82610992565b9050919050565b6109cd816109b2565b81146109d857600080fd5b50565b6000813590506109ea816109c4565b92915050565b600060208284031215610a0657610a0561098d565b5b6000610a14848285016109db565b91505092915050565b6000819050919050565b610a3081610a1d565b82525050565b6000602082019050610a4b6000830184610a27565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110610a9157610a90610a51565b5b50565b6000819050610aa282610a80565b919050565b6000610ab282610a94565b9050919050565b610ac281610aa7565b82525050565b6000602082019050610add6000830184610ab9565b92915050565b610aec81610a1d565b8114610af757600080fd5b50565b600081359050610b0981610ae3565b92915050565b600060208284031215610b2557610b2461098d565b5b6000610b3384828501610afa565b91505092915050565b610b45816109b2565b82525050565b6000602082019050610b606000830184610b3c565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ba082610a1d565b9150610bab83610a1d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610be057610bdf610b66565b5b828201905092915050565b6000604082019050610c006000830185610a27565b610c0d6020830184610b3c565b9392505050565b6000610c1f82610a1d565b9150610c2a83610a1d565b925082821015610c3d57610c3c610b66565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081905092915050565b50565b6000610c92600083610c77565b9150610c9d82610c82565b600082019050919050565b6000610cb382610c85565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610cf782610a1d565b9150610d0283610a1d565b925082610d1257610d11610cbd565b5b828204905092915050565b6000610d2882610a1d565b9150610d3383610a1d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610d6c57610d6b610b66565b5b82820290509291505056fea2646970667358221220bc8ed4a50f8772d4372836b43b5495fe6ef0a96b81e03304d091720f45e10a0b64736f6c63430008090033a26469706673582212203615428be52f3943c966928e9f1f50bfc6490625c5f64ba3d41b9ebbc2c18f2a64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 741,
        "contract": "contracts/stakeFactory.sol:StakeFactory",
        "label": "stakeAddrresses",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_contract(Stake)731)dyn_storage"
      },
      {
        "astId": 744,
        "contract": "contracts/stakeFactory.sol:StakeFactory",
        "label": "profit",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 746,
        "contract": "contracts/stakeFactory.sol:StakeFactory",
        "label": "interval",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_array(t_contract(Stake)731)dyn_storage": {
        "base": "t_contract(Stake)731",
        "encoding": "dynamic_array",
        "label": "contract Stake[]",
        "numberOfBytes": "32"
      },
      "t_contract(Stake)731": {
        "encoding": "inplace",
        "label": "contract Stake",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}